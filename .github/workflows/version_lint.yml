name: Version Check
on: pull_request
jobs:
  version-check:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install lxml
      - name: Checkout main branch
        uses: actions/checkout@v2
        with:
          ref: main
          path: main_branch_code
      - name: Get CHANGELOG.rst from main
        run: |
          echo "MAIN_VER=$(awk '/^[0-9]+\.[0-9]+\.[0-9]+/ { gsub(/[()]/, "", $1); print $1; exit }' main_branch_code/CHANGELOG.rst)" >> $GITHUB_ENV

      - name: Checkout develop branch
        uses: actions/checkout@v2
        with:
          ref: develop
          path: develop_branch_code
      - name: Get CHANGELOG.rst from develop
        run: |
          echo "DEVEL_VER=$(awk '/^[0-9]+\.[0-9]+\.[0-9]+/ { gsub(/[()]/, "", $1); print $1; exit }' develop_branch_code/CHANGELOG.rst)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Check Version
        run: |
          PR_BRANCH=${{ github.head_ref }}
          PR_BASE=${{ github.base_ref }}
          source $GITHUB_ENV

          # Get the desired VERSION
          if [[ "$PR_BASE" == "develop" ]]; then
            BASE_VERSION="$DEVEL_VER"
          elif [[ "$PR_BASE" == "main" ]]; then
            BASE_VERSION="$MAIN_VER"
          fi

          # Parse version number
          major=$(echo $BASE_VERSION | cut -d'.' -f1)
          minor=$(echo $BASE_VERSION | cut -d'.' -f2)
          patch=$(echo $BASE_VERSION | cut -d'.' -f3)

          # update version by rule
          if [[ "$PR_BASE" == "develop" && "$PR_BRANCH" == feature-* ]]; then
          elif [[ "$PR_BASE" == "main" && "$PR_BRANCH" == "develop" ]]; then
            # Increment middle part for merging develop into main
            minor=$((minor + 1))
            patch="0"
          elif [[ "$PR_BASE" == "main" && "$PR_BRANCH" == hotfix-* ]]; then
            # Increment minor part for hotfix branches on main
            patch=$((patch + 1))
          elif [[ "$PR_BASE" != "develop" || "$PR_BRANCH" != hotfix-* ]]; then
            # Handle invalid PR paths
            echo "Invalid PR path. Exiting."
            exit 1
          fi

          # Version check from update
          DESIRED_VERSION="${major}.${minor}.${patch}"
          echo "Correct version number: $DESIRED_VERSION"

          # Find all package.xml files and loop through them
          IS_FAILED=0
          find . -type f -name "package.xml" | while read -r package_file; do
            # Extract the version number using grep and sed
            version=$(grep -oP '(?<=<version>)[^<]+' "$package_file" | sed -n 1p)

            if [[ "$version" != "$DESIRED_VERSION" ]]; then
              echo "Error in package.xml file: $package_file, version: $version"
              IS_FAILED=1
            fi
          done

          CHANGELOG_VERSION=$(awk '/^[0-9]+\.[0-9]+\.[0-9]+/ { gsub(/[()]/, "", $1); print $1; exit }' CHANGELOG.rst)

          if [[ "$CHANGELOG_VERSION" != "$DESIRED_VERSION" ]]; then
            echo "Error in CHANGELOG.rst, version: $CHANGELOG_VERSION"
            IS_FAILED=1
          fi

          if [[ "$IS_FAILED" == 1 ]]; then
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
